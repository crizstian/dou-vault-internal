import "strings"
import "types"

outputs = {
	"primary_tfe_cluster": {
		"sensitive": false,
		"type":      "map",
		"value": {
			"installer_dashboard_password": null,
			"installer_dashboard_url":      null,
		},
	},
}

_modules = {
	"root": {
		"data":      {},
		"path":      [],
		"resources": {},
	},

	"module.primary_tfe": {
		"data": {
			"google_service_account": {
				"account_id": {
					0: {
						"attr": {
							"account_id":   "aeroframe",
							"display_name": "aeroframe",
							"email":        "aeroframe@aeroframe.iam.gserviceaccount.com",
							"id":           "projects/aeroframe/serviceAccounts/aeroframe@aeroframe.iam.gserviceaccount.com",
							"name":         "projects/aeroframe/serviceAccounts/aeroframe@aeroframe.iam.gserviceaccount.com",
							"project":      "aeroframe",
							"unique_id":    "116624002598362821754",
						},
						"depends_on": [],
						"id":         "projects/aeroframe/serviceAccounts/aeroframe@aeroframe.iam.gserviceaccount.com",
						"tainted":    false,
					},
				},
			},
		},
		"path": [
			"primary_tfe",
		],
		"resources": {},
	},
}

module_paths = [
	[],
	[
		"primary_tfe",
	],
]

terraform_version = "0.12.21"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
