# This policy uses the Sentinel tfplan import to require that
# all Azure VMs have vm sizes from an allowed list

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute in a given list
validate_attribute_in_list = func(type, attribute, allowed_values) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff[attribute].computed else false is true {
      print("Resource", address, "has attribute", attribute, "that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # validated = false
    } else {
      # Validate that each instance has allowed value
      if r.applied[attribute] else "" not in allowed_values {
        print("Resource", address, "has attribute", attribute, "with value",
              r.applied[attribute] else "",
              "that is not in the allowed list:", allowed_values)
        validated = false
      }
    }

  }
  return validated
}

##### Lists #####

# Allowed Azure VM Sizes
allowed_sizes = [
"Standard_D1_v2",
"Standard_D16_v3",
"Standard_D16a_v4",
"Standard_D16as_v4",
"Standard_D16s_v3",
"Standard_D2_v2",
"Standard_D2_v3",
"Standard_D2a_v4",
"Standard_D2as_v4",
"Standard_D2s_v3",
"Standard_D3_v2",
"Standard_D32_v3",
"Standard_D32a_v4",
"Standard_D32as_v4",
"Standard_D32s_v3",
"Standard_D4_v2",
"Standard_D4_v3",
"Standard_D48_v3",
"Standard_D48s_v3",
"Standard_D4a_v4",
"Standard_D4as_v4",
"Standard_D4s_v3",
"Standard_D5_v2",
"Standard_D64_v3",
"Standard_D64s_v3",
"Standard_D8_v3",
"Standard_D8a_v4",
"Standard_D8as_v4",
"Standard_D8s_v3",
"Standard_DS1_v2",
"Standard_DS2_v2",
"Standard_DS3_v2",
"Standard_DS4_v2DS5_v2",
"Standard_D11_v2",
"Standard_D12_v2",
"Standard_D13_v2",
"Standard_D14_v2",
"Standard_DS11_v2",
"Standard_DS11-1_v2",
"Standard_DS12_v2",
"Standard_DS12-1_v2",
"Standard_DS12-2_v2",
"Standard_DS13_v2",
"Standard_DS13-2_v2",
"Standard_DS13-4_v2",
"Standard_DS14_v2",
"Standard_DS14-4_v2",
"Standard_DS14-8_v2",
"Standard_E16_v3",
"Standard_E16-4s_v3",
"Standard_E16-8s_v3",
"Standard_E16a_v4",
"Standard_E16as_v4",
"Standard_E16s_v3",
"Standard_E2_v3",
"Standard_E20_v3",
"Standard_E20a_v4",
"Standard_E20as_v4",
"Standard_E20s_v3",
"Standard_E2a_v4",
"Standard_E2as_v4",
"Standard_E2s_v3",
"Standard_E32_v3",
"Standard_E32-16s_v3",
"Standard_E32-8s_v3",
"Standard_E32a_v4",
"Standard_E32as_v4",
"Standard_E32s_v3",
"Standard_E4_v3",
"Standard_E4-2s_v3",
"Standard_E48_v3",
"Standard_E48as_v4",
"Standard_E48s_v3",
"Standard_E4a_v4",
"Standard_E4as_v4",
"Standard_E4s_v3",
"Standard_E64_v3",
"Standard_E64-16s_v3",
"Standard_E64-32s_v3",
"Standard_E64as_v4",
"Standard_E64i_v3",
"Standard_E64is_v3",
"Standard_E64s_v3",
"Standard_E8_v3",
"Standard_E8-2s_v3",
"Standard_E8-4s_v3",
"Standard_E8a_v4",
"Standard_E8as_v4",
"Standard_E8s_v3",
"Standard_E96as_v4",
]

##### Rules #####

# Calls the validation function
vms_validated = validate_attribute_in_list("azurerm_virtual_machine", "vm_size", allowed_sizes)

# Main rule
main = rule {
  vms_validated
}