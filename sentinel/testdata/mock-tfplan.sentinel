import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"azurerm_network_interface": {
				"main": {
					0: {
						"applied": {
							"enable_accelerated_networking": false,
							"enable_ip_forwarding":          false,
							"ip_configuration": [
								{
									"name": "testconfiguration1",
									"private_ip_address_allocation": "dynamic",
									"private_ip_address_version":    "IPv4",
									"public_ip_address_id":          null,
								},
							],
							"location": "westeurope",
							"name":     "tfvmex-nic",
							"network_security_group_id": null,
							"resource_group_name":       "tfvmex-resources",
						},
						"destroy": false,
						"diff": {
							"applied_dns_servers.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"dns_servers.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"enable_accelerated_networking": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"enable_ip_forwarding": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"internal_dns_name_label": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"internal_fqdn": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_configuration.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"ip_configuration.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "westeurope",
								"old":      "",
							},
							"mac_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "tfvmex-nic",
								"old":      "",
							},
							"network_security_group_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"private_ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"private_ip_addresses.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"resource_group_name": {
								"computed": false,
								"new":      "tfvmex-resources",
								"old":      "",
							},
							"tags.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"virtual_machine_id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"azurerm_resource_group": {
				"main": {
					0: {
						"applied": {
							"location": "westeurope",
							"name":     "tfvmex-resources",
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "westeurope",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "tfvmex-resources",
								"old":      "",
							},
							"tags.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"azurerm_subnet": {
				"internal": {
					0: {
						"applied": {
							"address_prefix": "10.0.2.0/24",
							"delegation":     [],
							"enforce_private_link_endpoint_network_policies": false,
							"enforce_private_link_service_network_policies":  false,
							"name": "internal",
							"network_security_group_id": null,
							"resource_group_name":       "tfvmex-resources",
							"route_table_id":            null,
							"service_endpoints":         null,
							"virtual_network_name":      "tfvmex-network",
						},
						"destroy": false,
						"diff": {
							"address_prefix": {
								"computed": false,
								"new":      "10.0.2.0/24",
								"old":      "",
							},
							"delegation.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"enforce_private_link_endpoint_network_policies": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"enforce_private_link_service_network_policies": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_configurations.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "internal",
								"old":      "",
							},
							"network_security_group_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"resource_group_name": {
								"computed": false,
								"new":      "tfvmex-resources",
								"old":      "",
							},
							"route_table_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"service_endpoints": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"virtual_network_name": {
								"computed": false,
								"new":      "tfvmex-network",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"azurerm_virtual_machine": {
				"main": {
					0: {
						"applied": {
							"additional_capabilities":          [],
							"boot_diagnostics":                 [],
							"delete_data_disks_on_termination": false,
							"delete_os_disk_on_termination":    false,
							"location":                         "westeurope",
							"name":                             "tfvmex-vm",
							"os_profile": [
								{
									"admin_password": "Password1234!",
									"admin_username": "testadmin",
									"computer_name":  "hostname",
								},
							],
							"os_profile_linux_config": [
								{
									"disable_password_authentication": false,
									"ssh_keys":                        [],
								},
							],
							"os_profile_secrets":        [],
							"os_profile_windows_config": [],
							"plan": [],
							"primary_network_interface_id": null,
							"proximity_placement_group_id": null,
							"resource_group_name":          "tfvmex-resources",
							"storage_image_reference": [
								{
									"id":        "",
									"offer":     "UbuntuServer",
									"publisher": "Canonical",
									"sku":       "16.04-LTS",
									"version":   "latest",
								},
							],
							"storage_os_disk": [
								{
									"caching":                   "ReadWrite",
									"create_option":             "FromImage",
									"image_uri":                 null,
									"managed_disk_type":         "Standard_LRS",
									"name":                      "myosdisk1",
									"vhd_uri":                   null,
									"write_accelerator_enabled": false,
								},
							],
							"tags": {
								"environment": "staging",
							},
							"vm_size": "Standard_D4_v3",
							"zones":   null,
						},
						"destroy": false,
						"diff": {
							"additional_capabilities.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"availability_set_id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"boot_diagnostics.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"delete_data_disks_on_termination": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"delete_os_disk_on_termination": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"identity.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"license_type": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "westeurope",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "tfvmex-vm",
								"old":      "",
							},
							"network_interface_ids.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"os_profile.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"os_profile.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"os_profile_linux_config.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"os_profile_linux_config.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"os_profile_linux_config.0.disable_password_authentication": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"os_profile_linux_config.0.ssh_keys.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"os_profile_secrets.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"os_profile_windows_config.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"plan.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"primary_network_interface_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"proximity_placement_group_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"resource_group_name": {
								"computed": false,
								"new":      "tfvmex-resources",
								"old":      "",
							},
							"storage_data_disk.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"storage_image_reference.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"storage_image_reference.0.%": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"storage_image_reference.0.id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"storage_image_reference.0.offer": {
								"computed": false,
								"new":      "UbuntuServer",
								"old":      "",
							},
							"storage_image_reference.0.publisher": {
								"computed": false,
								"new":      "Canonical",
								"old":      "",
							},
							"storage_image_reference.0.sku": {
								"computed": false,
								"new":      "16.04-LTS",
								"old":      "",
							},
							"storage_image_reference.0.version": {
								"computed": false,
								"new":      "latest",
								"old":      "",
							},
							"storage_os_disk.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"storage_os_disk.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"tags.%": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"tags.environment": {
								"computed": false,
								"new":      "staging",
								"old":      "",
							},
							"vm_size": {
								"computed": false,
								"new":      "Standard_DS1_v2",
								"old":      "",
							},
							"zones": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"azurerm_virtual_network": {
				"main": {
					0: {
						"applied": {
							"address_space": [
								"10.0.0.0/16",
							],
							"ddos_protection_plan": [],
							"dns_servers":          null,
							"location":             "westeurope",
							"name":                 "tfvmex-network",
							"resource_group_name":  "tfvmex-resources",
						},
						"destroy": false,
						"diff": {
							"address_space.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"address_space.0": {
								"computed": false,
								"new":      "10.0.0.0/16",
								"old":      "",
							},
							"ddos_protection_plan.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"dns_servers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "westeurope",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "tfvmex-network",
								"old":      "",
							},
							"resource_group_name": {
								"computed": false,
								"new":      "tfvmex-resources",
								"old":      "",
							},
							"subnet.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"tags.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"random_id": {
				"project_tag": {
					0: {
						"applied": {
							"byte_length": 4,
							"keepers":     null,
							"prefix":      null,
						},
						"destroy": false,
						"diff": {
							"b64": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"b64_std": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"b64_url": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"byte_length": {
								"computed": false,
								"new":      "4",
								"old":      "",
							},
							"dec": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"hex": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"keepers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"prefix": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"random_pet": {
				"console_password": {
					0: {
						"applied": {
							"keepers":   null,
							"length":    3,
							"prefix":    null,
							"separator": "-",
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"keepers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"length": {
								"computed": false,
								"new":      "3",
								"old":      "",
							},
							"prefix": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"separator": {
								"computed": false,
								"new":      "-",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"random_string": {
				"default_enc_password": {
					0: {
						"applied": {
							"keepers":          null,
							"length":           32,
							"lower":            true,
							"min_lower":        0,
							"min_numeric":      0,
							"min_special":      0,
							"min_upper":        0,
							"number":           true,
							"override_special": null,
							"special":          false,
							"upper":            true,
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"keepers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"length": {
								"computed": false,
								"new":      "32",
								"old":      "",
							},
							"lower": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"min_lower": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"min_numeric": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"min_special": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"min_upper": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"number": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"override_special": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"result": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"special": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"upper": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe": {
		"data": {},
		"path": [
			"primary_tfe",
		],
		"resources": {
			"google_sql_database_instance": {
				"tfe-db-instance": {
					0: {
						"applied": {
							"database_version": "POSTGRES_9_6",
							"region":           "europe-west4",
							"settings": [
								{
									"authorized_gae_applications": null,
									"availability_type":           "REGIONAL",
									"backup_configuration": [
										{
											"binary_log_enabled": null,
											"enabled":            true,
											"location":           "europe-west4",
											"start_time":         "20:55",
										},
									],
									"database_flags":  [],
									"disk_autoresize": true,
									"disk_size":       100,
									"ip_configuration": [
										{
											"authorized_networks": [],
											"ipv4_enabled":        false,
											"require_ssl":         false,
										},
									],
									"maintenance_window": [
										{
											"day":          5,
											"hour":         12,
											"update_track": null,
										},
									],
									"pricing_plan":     "PER_USE",
									"replication_type": "SYNCHRONOUS",
									"tier":             "db-custom-8-30720",
									"user_labels": {
										"billing":    "937294293-smatale-tst",
										"operations": "937294293-smatale-tst",
										"security":   "937294293-smatale-tst",
									},
								},
							],
							"timeouts": null,
						},
						"destroy": false,
						"diff": {
							"connection_name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"database_version": {
								"computed": false,
								"new":      "POSTGRES_9_6",
								"old":      "",
							},
							"first_ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_address.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"master_instance_name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"private_ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"public_ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"replica_configuration.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"server_ca_cert.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service_account_email_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"settings.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"settings.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_sql_ssl_cert": {
				"client_cert": {
					0: {
						"applied": {
							"common_name": "terraform-generated",
							"project":     "aeroframe",
						},
						"destroy": false,
						"diff": {
							"cert": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"cert_serial_number": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"common_name": {
								"computed": false,
								"new":      "terraform-generated",
								"old":      "",
							},
							"create_time": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"expiration_time": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"private_key": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"server_ca_cert": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"sha1_fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_sql_user": {
				"users": {
					0: {
						"applied": {
							"host":     null,
							"name":     "postgres",
							"password": "admin",
						},
						"destroy": false,
						"diff": {
							"host": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "postgres",
								"old":      "",
							},
							"password": {
								"computed": false,
								"new":      "admin",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_storage_bucket": {
				"tfe-store": {
					0: {
						"applied": {
							"cors": [],
							"default_event_based_hold": null,
							"encryption":               [],
							"force_destroy":            false,
							"labels": {
								"billing":      "937294293-smatale-tst",
								"operations":   "937294293-smatale-tst",
								"security":     "937294293-smatale-tst",
								"serverstatus": "hypercare",
							},
							"lifecycle_rule":   [],
							"location":         "EUR4",
							"logging":          [],
							"requester_pays":   null,
							"retention_policy": [],
							"storage_class":    "STANDARD",
							"versioning":       [],
							"website":          [],
						},
						"destroy": false,
						"diff": {
							"bucket_policy_only": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"cors.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"default_event_based_hold": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"encryption.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"force_destroy": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"labels.%": {
								"computed": false,
								"new":      "4",
								"old":      "",
							},
							"labels.billing": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.operations": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.security": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.serverstatus": {
								"computed": false,
								"new":      "hypercare",
								"old":      "",
							},
							"lifecycle_rule.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "EUR4",
								"old":      "",
							},
							"logging.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"requester_pays": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"retention_policy.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"storage_class": {
								"computed": false,
								"new":      "STANDARD",
								"old":      "",
							},
							"url": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"versioning.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"website.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"null_resource": {
				"tfe_asg_depends_on": {
					0: {
						"applied": {
							"triggers": null,
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"triggers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
				"tfe_nlb_depends_on": {
					0: {
						"applied": {
							"triggers": null,
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"triggers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe.module.tfe_asg": {
		"data": {},
		"path": [
			"primary_tfe",
			"tfe_asg",
		],
		"resources": {
			"google_compute_health_check": {
				"instance_autohealing": {
					0: {
						"applied": {
							"check_interval_sec": 5,
							"description":        null,
							"healthy_threshold":  2,
							"http2_health_check": [],
							"http_health_check":  [],
							"https_health_check": [],
							"ssl_health_check":   [],
							"tcp_health_check": [
								{
									"port":               8800,
									"port_name":          null,
									"port_specification": null,
									"proxy_header":       "NONE",
									"request":            null,
									"response":           null,
								},
							],
							"timeout_sec":         5,
							"timeouts":            null,
							"unhealthy_threshold": 10,
						},
						"destroy": false,
						"diff": {
							"check_interval_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"healthy_threshold": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"http2_health_check.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"http_health_check.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"https_health_check.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ssl_health_check.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"tcp_health_check.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"tcp_health_check.0.%": {
								"computed": false,
								"new":      "6",
								"old":      "",
							},
							"tcp_health_check.0.port": {
								"computed": false,
								"new":      "8800",
								"old":      "",
							},
							"tcp_health_check.0.port_name": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"tcp_health_check.0.port_specification": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"tcp_health_check.0.proxy_header": {
								"computed": false,
								"new":      "NONE",
								"old":      "",
							},
							"tcp_health_check.0.request": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"tcp_health_check.0.response": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"timeout_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"type": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"unhealthy_threshold": {
								"computed": false,
								"new":      "10",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_instance_template": {
				"instance_template": {
					0: {
						"applied": {
							"can_ip_forward": false,
							"disk": [
								{
									"auto_delete":         true,
									"boot":                true,
									"disk_encryption_key": [],
									"disk_name":           null,
									"disk_size_gb":        50,
									"labels":              null,
									"source":              null,
									"source_image":        "rhel-7-v20190729",
								},
							],
							"enable_display":    null,
							"guest_accelerator": [],
							"labels": {
								"billing":      "937294293-smatale-tst",
								"operations":   "937294293-smatale-tst",
								"security":     "937294293-smatale-tst",
								"serverstatus": "hypercare",
								"servertype":   "app",
							},
							"machine_type":            "n1-standard-2",
							"metadata_startup_script": "    echo \"trigger disable yum cron\"\n    systemctl disable yum-cron\n    systemctl stop yum-cron \n    echo \"nameserver 169.254.169.254\" >> /etc/resolv.conf\n    # #!/bin/bash\n\n# set -e -o pipefail\n\n# # Grab all the install/config data from gcp's metadata store\n# mkdir /etc/ptfe\n\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/jq-url\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/jq-url\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/ptfe-hostname\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/hostname\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/repl-data\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/repl-data\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/b64-license\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/replicated-licenseb64\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/encpasswd\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/encpasswd\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_user\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_user\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_password\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_password\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_netloc\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_netloc\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_dbname\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_dbname\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_extra_params\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_extra_params\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_credentials\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_credentials\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_project\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_project\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_bucket\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_bucket\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_certificate\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/terraform.crt\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_cert_privatekey\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/terraform.key\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/private_ip\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_console_admin_username\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/tfe_console_admin_username\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_cosnole_admin_useremail\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/tfe_cosnole_admin_useremail\n\n# chown root:root /etc/ptfe/*\n# chown 0400 /etc/ptfe/*\n\n# JQ_URL=$(cat /etc/ptfe/jq-url)\n# curl -sfSL -o /usr/bin/jq $JQ_URL\n# chmod +x /usr/bin/jq\n\n# CONSOLE=$(base64 --decode /etc/ptfe/repl-data)\n# export CONSOLE\n# TFE_USERNAME=$(cat /etc/ptfe/tfe_console_admin_username)\n# export TFE_USERNAME\n# TFE_USEREMAIL=$(cat /etc/ptfe/tfe_cosnole_admin_useremail)\n# export TFE_USEREMAIL\n\n# # Store various bits of info as env vars\n# base64 -d /etc/ptfe/replicated-licenseb64 > /etc/replicated.rli\n# PTFEHOSTNAME=$(cat /etc/ptfe/hostname)\n# #PTFEHOSTNAME=${PTFEHOSTNAME%?}\n# export PTFEHOSTNAME\n# ENCPASSWD=$(cat /etc/ptfe/encpasswd)\n# export ENCPASSWD\n# PRIVATEIP=$(cat /etc/ptfe/private_ip)\n# export PRIVATEIP\n\n\n\n# if [[ $(< /etc/ptfe/pg_user) != none ]]; then\n#     PG_USER=$(cat /etc/ptfe/pg_user)\n#     export PG_USER\n#     PG_PASSWORD=$(base64 --decode /etc/ptfe/pg_password)\n#     export PG_PASSWORD\n#     PG_NETLOC=$(cat /etc/ptfe/pg_netloc)\n#     export PG_NETLOC\n#     PG_DBNAME=$(cat /etc/ptfe/pg_dbname)\n#     export PG_DBNAME\n#     if [ -f /etc/ptfe/pg_extra_params ]; then\n#         PG_EXTRA_PARAMS=$(cat /etc/ptfe/pg_extra_params)\n#     else\n#         PG_EXTRA_PARAMS=\n#     fi\n#     export PG_EXTRA_PARAMS\n#     GCS_PROJECT=$(cat /etc/ptfe/gcs_project)\n#     export GCS_PROJECT\n#     GCS_BUCKET=$(cat /etc/ptfe/gcs_bucket)\n#     export GCS_BUCKET\n#     GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n#     export GCS_CREDS\n# fi\n\n# # Setup the config files that will be used during the install\n# /bin/cat <<EOF >/etc/ptfe/payload.json\n# {\n#   \"username\": \"$TFE_USERNAME\",\n#   \"email\": \"$TFE_USEREMAIL\",\n#   \"password\": \"$CONSOLE\"\n# }\n# EOF\n\n# chown 0400 /etc/ptfe/payload.json\n\n# /bin/cat <<EOF >/etc/replicated-ptfe.conf\n# {\n#     \"hostname\": {\n#         \"value\": \"$PTFEHOSTNAME\"\n#     },\n#     \"enc_password\": {\n#         \"value\": \"$ENCPASSWD\"\n#     },\n#     \"installation_type\": {\n#         \"value\": \"production\"\n#     },\n#     \"production_type\": {\n#         \"value\": \"external\"\n#     },\n#     \"pg_user\": {\n#         \"value\": \"$PG_USER\"\n#     },\n#     \"pg_password\": {\n#         \"value\": \"$PG_PASSWORD\"\n#     },\n#     \"pg_netloc\": {\n#         \"value\": \"$PG_NETLOC\"\n#     },\n#     \"pg_dbname\": {\n#         \"value\": \"$PG_DBNAME\"\n#     },\n#     \"pg_extra_params\": {\n#         \"value\": \"$PG_EXTRA_PARAMS\"\n#     },\n#     \"placement\": {\n#         \"value\": \"placement_gcs\"\n#     },\n#     \"gcs_credentials\": {\n#         \"value\": \"$GCS_CREDS\"\n#     },\n#     \"gcs_project\": {\n#         \"value\": \"$GCS_PROJECT\"\n#     },\n#     \"gcs_bucket\": {\n#         \"value\": \"$GCS_BUCKET\"\n#     }\n# }\n# EOF\n\n# chown root:root /etc/replicated-ptfe.conf\n# chmod 0644 /etc/replicated-ptfe.conf\n\n# /bin/cat <<EOF >/etc/replicated.conf\n# {\n#     \"DaemonAuthenticationType\":     \"password\",\n#     \"DaemonAuthenticationPassword\": \"$CONSOLE\",\n#     \"TlsBootstrapType\":             \"server-path\",\n#     \"TlsBootstrapHostname\":         \"$PTFEHOSTNAME\",\n#     \"TlsBootstrapCert\":             \"/etc/ptfe/terraform.crt\",\n#     \"TlsBootstrapKey\":              \"/etc/ptfe/terraform.key\",\n#     \"BypassPreflightChecks\":        true,\n#     \"ImportSettingsFrom\":           \"/etc/replicated-ptfe.conf\",\n#     \"LicenseFileLocation\":          \"/etc/replicated.rli\"\n# }\n# EOF\n\n# chown root:root /etc/replicated.conf\n# chmod 0644 /etc/replicated.conf\n\n# #Install Stackdriver Logging and Monitoring Agent\n\n# GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n# export GCS_CREDS\n\n# GOOGLE_APPLICATION_CREDENTIALS=\"/etc/google/auth/application_default_credentials.json\"\n# sudo mkdir -p /etc/google/auth\n# echo \"$GCS_CREDS\" > \"$GOOGLE_APPLICATION_CREDENTIALS\"\n# sudo chown root:root \"$GOOGLE_APPLICATION_CREDENTIALS\"\n# sudo chmod 0400 \"$GOOGLE_APPLICATION_CREDENTIALS\"\n\n# curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh\n# sudo bash install-monitoring-agent.sh\n\n# curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n# sudo bash install-logging-agent.sh --structured\n\n# echo \"Running docker install\"\n# sudo -s\n# yum install docker-1.13.1-108.git4ef4b30.el7 -y\n\n# #Install Google Cloud SDK and JQ\n# tee -a /etc/yum.repos.d/google-cloud-sdk.repo << EOM\n# [google-cloud-sdk]\n# name=Google Cloud SDK\n# baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64\n# enabled=1\n# gpgcheck=1\n# repo_gpgcheck=1\n# gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n#        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\n# EOM\n\n# yum install google-cloud-sdk -y\n# yum install epel-release -y\n# yum install jq -y\n# echo \"Running docker storage setup\"\n\n# #Remove authorization plugins active RHEL Docker Service\n# systemctl stop docker\n# rm /usr/lib/systemd/system/docker.service\n\n# touch /usr/lib/systemd/system/docker.service\n# chown root:root /usr/lib/systemd/system/docker.service\n# chmod 0644 /usr/lib/systemd/system/docker.service\n# cat > /usr/lib/systemd/system/docker.service <<EOF\n# Wants=docker-storage-setup.service\n# Requires=rhel-push-plugin.service registries.service\n# Requires=docker-cleanup.timer\n# [Service]\n# Type=notify\n# NotifyAccess=main\n# EnvironmentFile=-/run/containers/registries.conf\n# EnvironmentFile=-/etc/sysconfig/docker\n# EnvironmentFile=-/etc/sysconfig/docker-storage\n# EnvironmentFile=-/etc/sysconfig/docker-network\n# Environment=GOTRACEBACK=crash\n# Environment=DOCKER_HTTP_HOST_COMPAT=1\n# Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin\n# ExecStart=/usr/bin/dockerd-current \\\n#           --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \\\n#           --default-runtime=docker-runc \\\n#           --exec-opt native.cgroupdriver=systemd \\\n#           --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \\\n#           --init-path=/usr/libexec/docker/docker-init-current \\\n#           --seccomp-profile=/etc/docker/seccomp.json \\\n#           $OPTIONS \\\n#           $DOCKER_STORAGE_OPTIONS \\\n#           $DOCKER_NETWORK_OPTIONS \\\n#           $ADD_REGISTRY \\\n#           $BLOCK_REGISTRY \\\n#           $INSECURE_REGISTRY \\\n#           $REGISTRIES\n# ExecReload=/bin/kill -s HUP $MAINPID\n# LimitNOFILE=1048576\n# LimitNPROC=1048576\n# LimitCORE=infinity\n# TimeoutStartSec=0\n# Restart=on-abnormal\n# KillMode=process\n#!/bin/bash\nset -e -o pipefail\n\n# global vars\nmetadataURL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nmetadataHeader=\"Metadata-Flavor: Google\"\nmetadataOutput=/etc/ptfe/\n\n# Grab all the install/config data from gcp's metadata store\nfunction metadataAttributesPTFE {\n    curl --silent --show-error --location --header \"$metadataHeader\" \"$metadataURL/attributes/$1\" -o $metadataOutput$2\n}\n\nfunction metadataNetworkPTFE {\n    curl --silent --show-error --location --header \"$metadataHeader\" \"$metadataURL/network-interfaces/0/$1\" -o $metadataOutput$2\n}\n\nfunction installMetadataInfo {\n    mkdir /etc/ptfe\n\n    metadataAttributesPTFE \"ptfe-hostname\" hostname\n    metadataAttributesPTFE \"b64-license\" replicated-licenseb64\n\n    metadataAttributesPTFE \"repl-data\" repl-data\n    metadataAttributesPTFE \"health_url\" health_url\n    metadataAttributesPTFE \"encpasswd\" encpasswd\n    metadataAttributesPTFE \"pg_user\" pg_user\n    metadataAttributesPTFE \"pg_password\" pg_password\n    metadataAttributesPTFE \"pg_netloc\" pg_netloc\n    metadataAttributesPTFE \"pg_dbname\" pg_dbname\n    metadataAttributesPTFE \"pg_extra_params\" pg_extra_params\n    metadataAttributesPTFE \"gcs_credentials\" gcs_credentials\n    metadataAttributesPTFE \"gcs_project\" gcs_project\n    metadataAttributesPTFE \"gcs_bucket\" gcs_bucket\n    metadataAttributesPTFE \"tfe_console_admin_username\" tfe_console_admin_username\n    metadataAttributesPTFE \"tfe_cosnole_admin_useremail\" tfe_cosnole_admin_useremail\n\n    metadataAttributesPTFE \"tfe_certificate\" terraform.crt\n    metadataAttributesPTFE \"tfe_cert_privatekey\" terraform.key\n\n    metadataAttributesPTFE \"sql_ssl_cert\" sql_ssl_cert.pem\n    metadataAttributesPTFE \"sql_ssl_server_ca_cert\" sql_ssl_server_ca_cert.pem\n    metadataAttributesPTFE \"sql_ssl_private_key\" sql_ssl_private_key.pem\n\n    metadataNetworkPTFE \"ip\" private_ip\n\n    chown root:root /etc/ptfe/*\n    chown 400 /etc/ptfe/*\n\n    chmod 600 /etc/ptfe/sql_ssl_*\n}\n\nfunction setupMetadataConfig {\n    base64 -d /etc/ptfe/replicated-licenseb64 > /etc/replicated.rli\n\n    CONSOLE=$(base64 --decode /etc/ptfe/repl-data)\n    TFE_USERNAME=$(cat /etc/ptfe/tfe_console_admin_username)\n    TFE_USEREMAIL=$(cat /etc/ptfe/tfe_cosnole_admin_useremail)\n    PTFEHOSTNAME=$(cat /etc/ptfe/hostname)\n\n    ENCPASSWD=$(cat /etc/ptfe/encpasswd)\n    PRIVATEIP=$(cat /etc/ptfe/private_ip)\n\n    PG_USER=$(cat /etc/ptfe/pg_user)\n    PG_PASSWORD=$(base64 --decode /etc/ptfe/pg_password)\n    PG_NETLOC=$(cat /etc/ptfe/pg_netloc)\n    PG_DBNAME=$(cat /etc/ptfe/pg_dbname)    \n\n    GCS_PROJECT=$(cat /etc/ptfe/gcs_project)\n    GCS_BUCKET=$(cat /etc/ptfe/gcs_bucket)\n    GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n    \n    if [ -f /etc/ptfe/pg_extra_params ]; then\n        PG_EXTRA_PARAMS=$(cat /etc/ptfe/pg_extra_params)\n    else\n        PG_EXTRA_PARAMS=\"\"\n    fi\n\n# Setup the config files that will be used during the install\ncat > /etc/ptfe/payload.json <<EOF \n{\n  \"username\": \"$TFE_USERNAME\",\n  \"email\": \"$TFE_USEREMAIL\",\n  \"password\": \"$CONSOLE\"\n}\nEOF\n\ncat > /etc/replicated-ptfe.conf <<EOF \n{\n    \"hostname\": {\n        \"value\": \"$PTFEHOSTNAME\"\n    },\n    \"enc_password\": {\n        \"value\": \"$ENCPASSWD\"\n    },\n    \"installation_type\": {\n        \"value\": \"production\"\n    },\n    \"production_type\": {\n        \"value\": \"external\"\n    },\n    \"pg_user\": {\n        \"value\": \"$PG_USER\"\n    },\n    \"pg_password\": {\n        \"value\": \"$PG_PASSWORD\"\n    },\n    \"pg_netloc\": {\n        \"value\": \"$PG_NETLOC\"\n    },\n    \"pg_dbname\": {\n        \"value\": \"$PG_DBNAME\"\n    },\n    \"pg_extra_params\": {\n        \"value\": \"$PG_EXTRA_PARAMS\"\n    },\n    \"placement\": {\n        \"value\": \"placement_gcs\"\n    },\n    \"gcs_credentials\": {\n        \"value\": \"$GCS_CREDS\"\n    },\n    \"gcs_project\": {\n        \"value\": \"$GCS_PROJECT\"\n    },\n    \"gcs_bucket\": {\n        \"value\": \"$GCS_BUCKET\"\n    }\n}\nEOF\n\ncat > /etc/replicated.conf <<EOF \n{\n    \"DaemonAuthenticationType\":     \"password\",\n    \"DaemonAuthenticationPassword\": \"$CONSOLE\",\n    \"TlsBootstrapType\":             \"server-path\",\n    \"TlsBootstrapHostname\":         \"$PTFEHOSTNAME\",\n    \"TlsBootstrapCert\":             \"/etc/ptfe/terraform.crt\",\n    \"TlsBootstrapKey\":              \"/etc/ptfe/terraform.key\",\n    \"BypassPreflightChecks\":        true,\n    \"ImportSettingsFrom\":           \"/etc/replicated-ptfe.conf\",\n    \"LicenseFileLocation\":          \"/etc/replicated.rli\"\n}\nEOF\n\n    chown 400 /etc/ptfe/payload.json\n    chown root:root /etc/replicated-ptfe.conf\n    chmod 644 /etc/replicated-ptfe.conf\n    chown root:root /etc/replicated.conf\n    chmod 644 /etc/replicated.conf\n}\n\nfunction installGoogleAgents {\n    GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n    GOOGLE_APPLICATION_CREDENTIALS=\"/etc/google/auth/application_default_credentials.json\"\n    mkdir -p /etc/google/auth\n    echo \"$GCS_CREDS\" > \"$GOOGLE_APPLICATION_CREDENTIALS\"\n    chown root:root \"$GOOGLE_APPLICATION_CREDENTIALS\"\n    chmod 400 \"$GOOGLE_APPLICATION_CREDENTIALS\"\n\n    curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh\n    bash install-monitoring-agent.sh\n\n    curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n    bash install-logging-agent.sh --structured\n}\n\nfunction installDocker {\n\nmkdir -p /etc/docker/\ncat > /etc/docker/daemon.conf << EOF\n{\n  \"mtu\": 1460\n}\nEOF\n\n    # OS specific configs\n    setenforce 0\n    mkdir -p /lib/tc\n    mount --bind /usr/lib64/tc/ /lib/tc/\n    sed -i -e 's/^SELINUX=enforcing/SELINUX=permissive/' /etc/sysconfig/selinux \n\n    yum -y install docker ipvsadm wget unzip\n    systemctl enable docker\n    systemctl start docker\n}\n\nfunction installPTFE {\n    echo \"Running 'ptfe install'\"\n\n    curl -o install.sh https://install.terraform.io/ptfe/stable\n    chmod +x ./install.sh\n    bash ./install.sh \\\n        no-proxy \\\n        no-docker \\\n        private-address=$(cat /etc/ptfe/private_ip) \\\n        public-address=$(cat /etc/ptfe/private_ip)\n\n    PRIVATEIP=$(cat /etc/ptfe/private_ip)\n    health_check=$(cat /etc/ptfe/health_url | sed \"s/IP/$PRIVATEIP\"/g )\n\n    until curl -ks $health_check | jq -r '.passed' | grep -q true; do\n        printf '.'\n        sleep 15\n    done\n\n    echo \"TFE is in healthy state now\"\n\n    initial_token=$(/usr/local/bin/replicated admin retrieve-iact)\n    echo \"== intial token is $initial_token ==\"\n\n    curl \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data @/etc/ptfe/payload.json \\\n    http://${PRIVATEIP}:8800/admin/initial-admin-user?token=$initial_token\n}\n\nfunction main {\n    # install dependencies\n    yum install google-cloud-sdk -y\n    yum install epel-release -y\n    yum install jq -y\n\n    installMetadataInfo \n    setupMetadataConfig\n    installGoogleAgents\n    installDocker\n    installPTFE\n\n}\n\nmain\n",
							"min_cpu_platform":        null,
							"network_interface": [
								{
									"access_config":  [],
									"alias_ip_range": [],
									"network_ip":     null,
								},
							],
							"region": "europe-west4",
							"scheduling": [
								{
									"automatic_restart":   true,
									"node_affinities":     [],
									"on_host_maintenance": "MIGRATE",
									"preemptible":         false,
								},
							],
							"service_account": [
								{
									"email": "aeroframe@aeroframe.iam.gserviceaccount.com",
									"scopes": [
										"https://www.googleapis.com/auth/cloud-platform",
										"https://www.googleapis.com/auth/compute.readonly",
										"https://www.googleapis.com/auth/devstorage.read_only",
										"https://www.googleapis.com/auth/userinfo.email",
									],
								},
							],
							"shielded_instance_config": [],
							"tags": [
								"healthcheck",
								"outbound",
								"tfe",
							],
						},
						"destroy": false,
						"diff": {
							"can_ip_forward": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"description": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"disk.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"disk.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"enable_display": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"guest_accelerator.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance_description": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"labels.%": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"labels.billing": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.operations": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.security": {
								"computed": false,
								"new":      "937294293-smatale-tst",
								"old":      "",
							},
							"labels.serverstatus": {
								"computed": false,
								"new":      "hypercare",
								"old":      "",
							},
							"labels.servertype": {
								"computed": false,
								"new":      "app",
								"old":      "",
							},
							"machine_type": {
								"computed": false,
								"new":      "n1-standard-2",
								"old":      "",
							},
							"metadata.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"metadata_fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"metadata_startup_script": {
								"computed": false,
								"new":      "    echo \"trigger disable yum cron\"\n    systemctl disable yum-cron\n    systemctl stop yum-cron \n    echo \"nameserver 169.254.169.254\" >> /etc/resolv.conf\n    # #!/bin/bash\n\n# set -e -o pipefail\n\n# # Grab all the install/config data from gcp's metadata store\n# mkdir /etc/ptfe\n\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/jq-url\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/jq-url\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/ptfe-hostname\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/hostname\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/repl-data\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/repl-data\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/b64-license\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/replicated-licenseb64\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/encpasswd\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/encpasswd\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_user\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_user\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_password\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_password\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_netloc\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_netloc\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_dbname\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_dbname\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/pg_extra_params\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/pg_extra_params\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_credentials\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_credentials\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_project\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_project\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcs_bucket\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/gcs_bucket\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_certificate\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/terraform.crt\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_cert_privatekey\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/terraform.key\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/private_ip\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_console_admin_username\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/tfe_console_admin_username\n# curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/tfe_cosnole_admin_useremail\" -H \"Metadata-Flavor: Google\" -o /etc/ptfe/tfe_cosnole_admin_useremail\n\n# chown root:root /etc/ptfe/*\n# chown 0400 /etc/ptfe/*\n\n# JQ_URL=$(cat /etc/ptfe/jq-url)\n# curl -sfSL -o /usr/bin/jq $JQ_URL\n# chmod +x /usr/bin/jq\n\n# CONSOLE=$(base64 --decode /etc/ptfe/repl-data)\n# export CONSOLE\n# TFE_USERNAME=$(cat /etc/ptfe/tfe_console_admin_username)\n# export TFE_USERNAME\n# TFE_USEREMAIL=$(cat /etc/ptfe/tfe_cosnole_admin_useremail)\n# export TFE_USEREMAIL\n\n# # Store various bits of info as env vars\n# base64 -d /etc/ptfe/replicated-licenseb64 > /etc/replicated.rli\n# PTFEHOSTNAME=$(cat /etc/ptfe/hostname)\n# #PTFEHOSTNAME=${PTFEHOSTNAME%?}\n# export PTFEHOSTNAME\n# ENCPASSWD=$(cat /etc/ptfe/encpasswd)\n# export ENCPASSWD\n# PRIVATEIP=$(cat /etc/ptfe/private_ip)\n# export PRIVATEIP\n\n\n\n# if [[ $(< /etc/ptfe/pg_user) != none ]]; then\n#     PG_USER=$(cat /etc/ptfe/pg_user)\n#     export PG_USER\n#     PG_PASSWORD=$(base64 --decode /etc/ptfe/pg_password)\n#     export PG_PASSWORD\n#     PG_NETLOC=$(cat /etc/ptfe/pg_netloc)\n#     export PG_NETLOC\n#     PG_DBNAME=$(cat /etc/ptfe/pg_dbname)\n#     export PG_DBNAME\n#     if [ -f /etc/ptfe/pg_extra_params ]; then\n#         PG_EXTRA_PARAMS=$(cat /etc/ptfe/pg_extra_params)\n#     else\n#         PG_EXTRA_PARAMS=\n#     fi\n#     export PG_EXTRA_PARAMS\n#     GCS_PROJECT=$(cat /etc/ptfe/gcs_project)\n#     export GCS_PROJECT\n#     GCS_BUCKET=$(cat /etc/ptfe/gcs_bucket)\n#     export GCS_BUCKET\n#     GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n#     export GCS_CREDS\n# fi\n\n# # Setup the config files that will be used during the install\n# /bin/cat <<EOF >/etc/ptfe/payload.json\n# {\n#   \"username\": \"$TFE_USERNAME\",\n#   \"email\": \"$TFE_USEREMAIL\",\n#   \"password\": \"$CONSOLE\"\n# }\n# EOF\n\n# chown 0400 /etc/ptfe/payload.json\n\n# /bin/cat <<EOF >/etc/replicated-ptfe.conf\n# {\n#     \"hostname\": {\n#         \"value\": \"$PTFEHOSTNAME\"\n#     },\n#     \"enc_password\": {\n#         \"value\": \"$ENCPASSWD\"\n#     },\n#     \"installation_type\": {\n#         \"value\": \"production\"\n#     },\n#     \"production_type\": {\n#         \"value\": \"external\"\n#     },\n#     \"pg_user\": {\n#         \"value\": \"$PG_USER\"\n#     },\n#     \"pg_password\": {\n#         \"value\": \"$PG_PASSWORD\"\n#     },\n#     \"pg_netloc\": {\n#         \"value\": \"$PG_NETLOC\"\n#     },\n#     \"pg_dbname\": {\n#         \"value\": \"$PG_DBNAME\"\n#     },\n#     \"pg_extra_params\": {\n#         \"value\": \"$PG_EXTRA_PARAMS\"\n#     },\n#     \"placement\": {\n#         \"value\": \"placement_gcs\"\n#     },\n#     \"gcs_credentials\": {\n#         \"value\": \"$GCS_CREDS\"\n#     },\n#     \"gcs_project\": {\n#         \"value\": \"$GCS_PROJECT\"\n#     },\n#     \"gcs_bucket\": {\n#         \"value\": \"$GCS_BUCKET\"\n#     }\n# }\n# EOF\n\n# chown root:root /etc/replicated-ptfe.conf\n# chmod 0644 /etc/replicated-ptfe.conf\n\n# /bin/cat <<EOF >/etc/replicated.conf\n# {\n#     \"DaemonAuthenticationType\":     \"password\",\n#     \"DaemonAuthenticationPassword\": \"$CONSOLE\",\n#     \"TlsBootstrapType\":             \"server-path\",\n#     \"TlsBootstrapHostname\":         \"$PTFEHOSTNAME\",\n#     \"TlsBootstrapCert\":             \"/etc/ptfe/terraform.crt\",\n#     \"TlsBootstrapKey\":              \"/etc/ptfe/terraform.key\",\n#     \"BypassPreflightChecks\":        true,\n#     \"ImportSettingsFrom\":           \"/etc/replicated-ptfe.conf\",\n#     \"LicenseFileLocation\":          \"/etc/replicated.rli\"\n# }\n# EOF\n\n# chown root:root /etc/replicated.conf\n# chmod 0644 /etc/replicated.conf\n\n# #Install Stackdriver Logging and Monitoring Agent\n\n# GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n# export GCS_CREDS\n\n# GOOGLE_APPLICATION_CREDENTIALS=\"/etc/google/auth/application_default_credentials.json\"\n# sudo mkdir -p /etc/google/auth\n# echo \"$GCS_CREDS\" > \"$GOOGLE_APPLICATION_CREDENTIALS\"\n# sudo chown root:root \"$GOOGLE_APPLICATION_CREDENTIALS\"\n# sudo chmod 0400 \"$GOOGLE_APPLICATION_CREDENTIALS\"\n\n# curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh\n# sudo bash install-monitoring-agent.sh\n\n# curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n# sudo bash install-logging-agent.sh --structured\n\n# echo \"Running docker install\"\n# sudo -s\n# yum install docker-1.13.1-108.git4ef4b30.el7 -y\n\n# #Install Google Cloud SDK and JQ\n# tee -a /etc/yum.repos.d/google-cloud-sdk.repo << EOM\n# [google-cloud-sdk]\n# name=Google Cloud SDK\n# baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64\n# enabled=1\n# gpgcheck=1\n# repo_gpgcheck=1\n# gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n#        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\n# EOM\n\n# yum install google-cloud-sdk -y\n# yum install epel-release -y\n# yum install jq -y\n# echo \"Running docker storage setup\"\n\n# #Remove authorization plugins active RHEL Docker Service\n# systemctl stop docker\n# rm /usr/lib/systemd/system/docker.service\n\n# touch /usr/lib/systemd/system/docker.service\n# chown root:root /usr/lib/systemd/system/docker.service\n# chmod 0644 /usr/lib/systemd/system/docker.service\n# cat > /usr/lib/systemd/system/docker.service <<EOF\n# Wants=docker-storage-setup.service\n# Requires=rhel-push-plugin.service registries.service\n# Requires=docker-cleanup.timer\n# [Service]\n# Type=notify\n# NotifyAccess=main\n# EnvironmentFile=-/run/containers/registries.conf\n# EnvironmentFile=-/etc/sysconfig/docker\n# EnvironmentFile=-/etc/sysconfig/docker-storage\n# EnvironmentFile=-/etc/sysconfig/docker-network\n# Environment=GOTRACEBACK=crash\n# Environment=DOCKER_HTTP_HOST_COMPAT=1\n# Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin\n# ExecStart=/usr/bin/dockerd-current \\\n#           --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \\\n#           --default-runtime=docker-runc \\\n#           --exec-opt native.cgroupdriver=systemd \\\n#           --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \\\n#           --init-path=/usr/libexec/docker/docker-init-current \\\n#           --seccomp-profile=/etc/docker/seccomp.json \\\n#           $OPTIONS \\\n#           $DOCKER_STORAGE_OPTIONS \\\n#           $DOCKER_NETWORK_OPTIONS \\\n#           $ADD_REGISTRY \\\n#           $BLOCK_REGISTRY \\\n#           $INSECURE_REGISTRY \\\n#           $REGISTRIES\n# ExecReload=/bin/kill -s HUP $MAINPID\n# LimitNOFILE=1048576\n# LimitNPROC=1048576\n# LimitCORE=infinity\n# TimeoutStartSec=0\n# Restart=on-abnormal\n# KillMode=process\n#!/bin/bash\nset -e -o pipefail\n\n# global vars\nmetadataURL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nmetadataHeader=\"Metadata-Flavor: Google\"\nmetadataOutput=/etc/ptfe/\n\n# Grab all the install/config data from gcp's metadata store\nfunction metadataAttributesPTFE {\n    curl --silent --show-error --location --header \"$metadataHeader\" \"$metadataURL/attributes/$1\" -o $metadataOutput$2\n}\n\nfunction metadataNetworkPTFE {\n    curl --silent --show-error --location --header \"$metadataHeader\" \"$metadataURL/network-interfaces/0/$1\" -o $metadataOutput$2\n}\n\nfunction installMetadataInfo {\n    mkdir /etc/ptfe\n\n    metadataAttributesPTFE \"ptfe-hostname\" hostname\n    metadataAttributesPTFE \"b64-license\" replicated-licenseb64\n\n    metadataAttributesPTFE \"repl-data\" repl-data\n    metadataAttributesPTFE \"health_url\" health_url\n    metadataAttributesPTFE \"encpasswd\" encpasswd\n    metadataAttributesPTFE \"pg_user\" pg_user\n    metadataAttributesPTFE \"pg_password\" pg_password\n    metadataAttributesPTFE \"pg_netloc\" pg_netloc\n    metadataAttributesPTFE \"pg_dbname\" pg_dbname\n    metadataAttributesPTFE \"pg_extra_params\" pg_extra_params\n    metadataAttributesPTFE \"gcs_credentials\" gcs_credentials\n    metadataAttributesPTFE \"gcs_project\" gcs_project\n    metadataAttributesPTFE \"gcs_bucket\" gcs_bucket\n    metadataAttributesPTFE \"tfe_console_admin_username\" tfe_console_admin_username\n    metadataAttributesPTFE \"tfe_cosnole_admin_useremail\" tfe_cosnole_admin_useremail\n\n    metadataAttributesPTFE \"tfe_certificate\" terraform.crt\n    metadataAttributesPTFE \"tfe_cert_privatekey\" terraform.key\n\n    metadataAttributesPTFE \"sql_ssl_cert\" sql_ssl_cert.pem\n    metadataAttributesPTFE \"sql_ssl_server_ca_cert\" sql_ssl_server_ca_cert.pem\n    metadataAttributesPTFE \"sql_ssl_private_key\" sql_ssl_private_key.pem\n\n    metadataNetworkPTFE \"ip\" private_ip\n\n    chown root:root /etc/ptfe/*\n    chown 400 /etc/ptfe/*\n\n    chmod 600 /etc/ptfe/sql_ssl_*\n}\n\nfunction setupMetadataConfig {\n    base64 -d /etc/ptfe/replicated-licenseb64 > /etc/replicated.rli\n\n    CONSOLE=$(base64 --decode /etc/ptfe/repl-data)\n    TFE_USERNAME=$(cat /etc/ptfe/tfe_console_admin_username)\n    TFE_USEREMAIL=$(cat /etc/ptfe/tfe_cosnole_admin_useremail)\n    PTFEHOSTNAME=$(cat /etc/ptfe/hostname)\n\n    ENCPASSWD=$(cat /etc/ptfe/encpasswd)\n    PRIVATEIP=$(cat /etc/ptfe/private_ip)\n\n    PG_USER=$(cat /etc/ptfe/pg_user)\n    PG_PASSWORD=$(base64 --decode /etc/ptfe/pg_password)\n    PG_NETLOC=$(cat /etc/ptfe/pg_netloc)\n    PG_DBNAME=$(cat /etc/ptfe/pg_dbname)    \n\n    GCS_PROJECT=$(cat /etc/ptfe/gcs_project)\n    GCS_BUCKET=$(cat /etc/ptfe/gcs_bucket)\n    GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n    \n    if [ -f /etc/ptfe/pg_extra_params ]; then\n        PG_EXTRA_PARAMS=$(cat /etc/ptfe/pg_extra_params)\n    else\n        PG_EXTRA_PARAMS=\"\"\n    fi\n\n# Setup the config files that will be used during the install\ncat > /etc/ptfe/payload.json <<EOF \n{\n  \"username\": \"$TFE_USERNAME\",\n  \"email\": \"$TFE_USEREMAIL\",\n  \"password\": \"$CONSOLE\"\n}\nEOF\n\ncat > /etc/replicated-ptfe.conf <<EOF \n{\n    \"hostname\": {\n        \"value\": \"$PTFEHOSTNAME\"\n    },\n    \"enc_password\": {\n        \"value\": \"$ENCPASSWD\"\n    },\n    \"installation_type\": {\n        \"value\": \"production\"\n    },\n    \"production_type\": {\n        \"value\": \"external\"\n    },\n    \"pg_user\": {\n        \"value\": \"$PG_USER\"\n    },\n    \"pg_password\": {\n        \"value\": \"$PG_PASSWORD\"\n    },\n    \"pg_netloc\": {\n        \"value\": \"$PG_NETLOC\"\n    },\n    \"pg_dbname\": {\n        \"value\": \"$PG_DBNAME\"\n    },\n    \"pg_extra_params\": {\n        \"value\": \"$PG_EXTRA_PARAMS\"\n    },\n    \"placement\": {\n        \"value\": \"placement_gcs\"\n    },\n    \"gcs_credentials\": {\n        \"value\": \"$GCS_CREDS\"\n    },\n    \"gcs_project\": {\n        \"value\": \"$GCS_PROJECT\"\n    },\n    \"gcs_bucket\": {\n        \"value\": \"$GCS_BUCKET\"\n    }\n}\nEOF\n\ncat > /etc/replicated.conf <<EOF \n{\n    \"DaemonAuthenticationType\":     \"password\",\n    \"DaemonAuthenticationPassword\": \"$CONSOLE\",\n    \"TlsBootstrapType\":             \"server-path\",\n    \"TlsBootstrapHostname\":         \"$PTFEHOSTNAME\",\n    \"TlsBootstrapCert\":             \"/etc/ptfe/terraform.crt\",\n    \"TlsBootstrapKey\":              \"/etc/ptfe/terraform.key\",\n    \"BypassPreflightChecks\":        true,\n    \"ImportSettingsFrom\":           \"/etc/replicated-ptfe.conf\",\n    \"LicenseFileLocation\":          \"/etc/replicated.rli\"\n}\nEOF\n\n    chown 400 /etc/ptfe/payload.json\n    chown root:root /etc/replicated-ptfe.conf\n    chmod 644 /etc/replicated-ptfe.conf\n    chown root:root /etc/replicated.conf\n    chmod 644 /etc/replicated.conf\n}\n\nfunction installGoogleAgents {\n    GCS_CREDS=$(base64 --decode /etc/ptfe/gcs_credentials | jq -c . | sed -e 's/\"/\\\\\"/g' -e 's/\\\\n/\\\\\\\\n/g')\n    GOOGLE_APPLICATION_CREDENTIALS=\"/etc/google/auth/application_default_credentials.json\"\n    mkdir -p /etc/google/auth\n    echo \"$GCS_CREDS\" > \"$GOOGLE_APPLICATION_CREDENTIALS\"\n    chown root:root \"$GOOGLE_APPLICATION_CREDENTIALS\"\n    chmod 400 \"$GOOGLE_APPLICATION_CREDENTIALS\"\n\n    curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh\n    bash install-monitoring-agent.sh\n\n    curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n    bash install-logging-agent.sh --structured\n}\n\nfunction installDocker {\n\nmkdir -p /etc/docker/\ncat > /etc/docker/daemon.conf << EOF\n{\n  \"mtu\": 1460\n}\nEOF\n\n    # OS specific configs\n    setenforce 0\n    mkdir -p /lib/tc\n    mount --bind /usr/lib64/tc/ /lib/tc/\n    sed -i -e 's/^SELINUX=enforcing/SELINUX=permissive/' /etc/sysconfig/selinux \n\n    yum -y install docker ipvsadm wget unzip\n    systemctl enable docker\n    systemctl start docker\n}\n\nfunction installPTFE {\n    echo \"Running 'ptfe install'\"\n\n    curl -o install.sh https://install.terraform.io/ptfe/stable\n    chmod +x ./install.sh\n    bash ./install.sh \\\n        no-proxy \\\n        no-docker \\\n        private-address=$(cat /etc/ptfe/private_ip) \\\n        public-address=$(cat /etc/ptfe/private_ip)\n\n    PRIVATEIP=$(cat /etc/ptfe/private_ip)\n    health_check=$(cat /etc/ptfe/health_url | sed \"s/IP/$PRIVATEIP\"/g )\n\n    until curl -ks $health_check | jq -r '.passed' | grep -q true; do\n        printf '.'\n        sleep 15\n    done\n\n    echo \"TFE is in healthy state now\"\n\n    initial_token=$(/usr/local/bin/replicated admin retrieve-iact)\n    echo \"== intial token is $initial_token ==\"\n\n    curl \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data @/etc/ptfe/payload.json \\\n    http://${PRIVATEIP}:8800/admin/initial-admin-user?token=$initial_token\n}\n\nfunction main {\n    # install dependencies\n    yum install google-cloud-sdk -y\n    yum install epel-release -y\n    yum install jq -y\n\n    installMetadataInfo \n    setupMetadataConfig\n    installGoogleAgents\n    installDocker\n    installPTFE\n\n}\n\nmain\n",
								"old":      "",
							},
							"min_cpu_platform": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name_prefix": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network_interface.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"network_interface.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"scheduling.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"scheduling.0.%": {
								"computed": false,
								"new":      "4",
								"old":      "",
							},
							"scheduling.0.automatic_restart": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"scheduling.0.node_affinities.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"scheduling.0.on_host_maintenance": {
								"computed": false,
								"new":      "MIGRATE",
								"old":      "",
							},
							"scheduling.0.preemptible": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service_account.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"service_account.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"service_account.0.email": {
								"computed": false,
								"new":      "aeroframe@aeroframe.iam.gserviceaccount.com",
								"old":      "",
							},
							"service_account.0.scopes.#": {
								"computed": false,
								"new":      "4",
								"old":      "",
							},
							"service_account.0.scopes.0": {
								"computed": false,
								"new":      "https://www.googleapis.com/auth/cloud-platform",
								"old":      "",
							},
							"service_account.0.scopes.1": {
								"computed": false,
								"new":      "https://www.googleapis.com/auth/compute.readonly",
								"old":      "",
							},
							"service_account.0.scopes.2": {
								"computed": false,
								"new":      "https://www.googleapis.com/auth/devstorage.read_only",
								"old":      "",
							},
							"service_account.0.scopes.3": {
								"computed": false,
								"new":      "https://www.googleapis.com/auth/userinfo.email",
								"old":      "",
							},
							"shielded_instance_config.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"tags.#": {
								"computed": false,
								"new":      "3",
								"old":      "",
							},
							"tags.0": {
								"computed": false,
								"new":      "healthcheck",
								"old":      "",
							},
							"tags.1": {
								"computed": false,
								"new":      "outbound",
								"old":      "",
							},
							"tags.2": {
								"computed": false,
								"new":      "tfe",
								"old":      "",
							},
							"tags_fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_region_instance_group_manager": {
				"instance_rigm": {
					0: {
						"applied": {
							"auto_healing_policies": [
								{
									"initial_delay_sec": 1800,
								},
							],
							"description": null,
							"distribution_policy_zones": [
								"europe-west4-a",
								"europe-west4-b",
							],
							"named_port":   [],
							"region":       "europe-west4",
							"target_pools": null,
							"target_size":  2,
							"timeouts":     null,
							"update_policy": [
								{
									"instance_redistribution_type": null,
									"max_surge_fixed":              3,
									"max_surge_percent":            null,
									"max_unavailable_fixed":        0,
									"max_unavailable_percent":      null,
									"min_ready_sec":                10,
									"minimal_action":               "REPLACE",
									"type":                         "PROACTIVE",
								},
							],
							"version": [
								{
									"target_size": [],
								},
							],
							"wait_for_instances": false,
						},
						"destroy": false,
						"diff": {
							"auto_healing_policies.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"auto_healing_policies.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"base_instance_name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"distribution_policy_zones.#": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"distribution_policy_zones.0": {
								"computed": false,
								"new":      "europe-west4-a",
								"old":      "",
							},
							"distribution_policy_zones.1": {
								"computed": false,
								"new":      "europe-west4-b",
								"old":      "",
							},
							"fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance_group": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance_template": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"named_port.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"target_pools": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"target_size": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"update_policy.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"update_policy.0.%": {
								"computed": false,
								"new":      "8",
								"old":      "",
							},
							"update_policy.0.instance_redistribution_type": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"update_policy.0.max_surge_fixed": {
								"computed": false,
								"new":      "3",
								"old":      "",
							},
							"update_policy.0.max_surge_percent": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"update_policy.0.max_unavailable_fixed": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"update_policy.0.max_unavailable_percent": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"update_policy.0.min_ready_sec": {
								"computed": false,
								"new":      "10",
								"old":      "",
							},
							"update_policy.0.minimal_action": {
								"computed": false,
								"new":      "REPLACE",
								"old":      "",
							},
							"update_policy.0.type": {
								"computed": false,
								"new":      "PROACTIVE",
								"old":      "",
							},
							"update_strategy": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"version.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"version.0.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"wait_for_instances": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe.module.tfe_fw": {
		"data": {},
		"path": [
			"primary_tfe",
			"tfe_fw",
		],
		"resources": {
			"google_compute_firewall": {
				"gcp_fw": {
					0: {
						"applied": {
							"allow": [
								{
									"ports": [
										"22",
										"80",
										"443",
										"6443",
										"8800",
										"23010",
									],
									"protocol": "TCP",
								},
							],
							"deny":           [],
							"description":    null,
							"disabled":       null,
							"enable_logging": null,
							"priority":       1000,
							"source_ranges": [
								"10.0.0.0/16",
							],
							"source_service_accounts": null,
							"source_tags":             null,
							"target_service_accounts": null,
							"target_tags": [
								"tfe",
							],
							"timeouts": null,
						},
						"destroy": false,
						"diff": {
							"allow.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"allow.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"allow.0.ports.#": {
								"computed": false,
								"new":      "6",
								"old":      "",
							},
							"allow.0.ports.0": {
								"computed": false,
								"new":      "22",
								"old":      "",
							},
							"allow.0.ports.1": {
								"computed": false,
								"new":      "80",
								"old":      "",
							},
							"allow.0.ports.2": {
								"computed": false,
								"new":      "443",
								"old":      "",
							},
							"allow.0.ports.3": {
								"computed": false,
								"new":      "6443",
								"old":      "",
							},
							"allow.0.ports.4": {
								"computed": false,
								"new":      "8800",
								"old":      "",
							},
							"allow.0.ports.5": {
								"computed": false,
								"new":      "23010",
								"old":      "",
							},
							"allow.0.protocol": {
								"computed": false,
								"new":      "TCP",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"deny.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"destination_ranges.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"direction": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"disabled": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"enable_logging": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"priority": {
								"computed": false,
								"new":      "1000",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"source_ranges.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"source_ranges.0": {
								"computed": false,
								"new":      "10.0.0.0/16",
								"old":      "",
							},
							"source_service_accounts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"source_tags": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"target_service_accounts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"target_tags.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"target_tags.0": {
								"computed": false,
								"new":      "tfe",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe.module.tfe_network": {
		"data": {
			"google_compute_network": {
				"network": {
					0: {
						"applied": {
							"project": null,
						},
						"destroy": false,
						"diff": {
							"description": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"gateway_ipv4": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"subnetworks_self_links.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
		"path": [
			"primary_tfe",
			"tfe_network",
		],
		"resources": {
			"google_compute_global_address": {
				"private_ip_address": {
					0: {
						"applied": {
							"address_type":  "INTERNAL",
							"description":   null,
							"ip_version":    null,
							"labels":        null,
							"prefix_length": 16,
							"purpose":       "VPC_PEERING",
							"timeouts":      null,
						},
						"destroy": false,
						"diff": {
							"address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"address_type": {
								"computed": false,
								"new":      "INTERNAL",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_version": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"label_fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"labels": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"prefix_length": {
								"computed": false,
								"new":      "16",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"purpose": {
								"computed": false,
								"new":      "VPC_PEERING",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_network": {
				"vpc": {
					0: {
						"applied": {
							"auto_create_subnetworks":         true,
							"delete_default_routes_on_create": false,
							"description":                     null,
							"timeouts":                        null,
						},
						"destroy": false,
						"diff": {
							"auto_create_subnetworks": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"delete_default_routes_on_create": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"gateway_ipv4": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ipv4_range": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"routing_mode": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_service_networking_connection": {
				"private_vpc_connection": {
					0: {
						"applied": {
							"service": "servicenetworking.googleapis.com",
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"peering": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"reserved_peering_ranges.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service": {
								"computed": false,
								"new":      "servicenetworking.googleapis.com",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"null_resource": {
				"google_service_networking_connection": {
					0: {
						"applied": {
							"triggers": null,
						},
						"destroy": false,
						"diff": {
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"triggers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe.module.tfe_network.module.nat": {
		"data": {},
		"path": [
			"primary_tfe",
			"tfe_network",
			"nat",
		],
		"resources": {
			"google_compute_router": {
				"router": {
					0: {
						"applied": {
							"bgp": [
								{
									"advertise_mode":       "DEFAULT",
									"advertised_groups":    null,
									"advertised_ip_ranges": [],
									"asn": 64514,
								},
							],
							"description": null,
							"region":      "europe-west4",
							"timeouts":    null,
						},
						"destroy": false,
						"diff": {
							"bgp.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"bgp.0.%": {
								"computed": false,
								"new":      "4",
								"old":      "",
							},
							"bgp.0.advertise_mode": {
								"computed": false,
								"new":      "DEFAULT",
								"old":      "",
							},
							"bgp.0.advertised_groups": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"bgp.0.advertised_ip_ranges.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"bgp.0.asn": {
								"computed": false,
								"new":      "64514",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_router_nat": {
				"nat": {
					0: {
						"applied": {
							"icmp_idle_timeout_sec": 30,
							"log_config": [
								{
									"enable": true,
									"filter": "ERRORS_ONLY",
								},
							],
							"min_ports_per_vm":       null,
							"nat_ip_allocate_option": "AUTO_ONLY",
							"nat_ips":                null,
							"region":                 "europe-west4",
							"source_subnetwork_ip_ranges_to_nat": "ALL_SUBNETWORKS_ALL_IP_RANGES",
							"subnetwork":                         [],
							"tcp_established_idle_timeout_sec":   1200,
							"tcp_transitory_idle_timeout_sec":    30,
							"timeouts":                           null,
							"udp_idle_timeout_sec":               30,
						},
						"destroy": false,
						"diff": {
							"icmp_idle_timeout_sec": {
								"computed": false,
								"new":      "30",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"log_config.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"log_config.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"log_config.0.enable": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"log_config.0.filter": {
								"computed": false,
								"new":      "ERRORS_ONLY",
								"old":      "",
							},
							"min_ports_per_vm": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"nat_ip_allocate_option": {
								"computed": false,
								"new":      "AUTO_ONLY",
								"old":      "",
							},
							"nat_ips": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"router": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"source_subnetwork_ip_ranges_to_nat": {
								"computed": false,
								"new":      "ALL_SUBNETWORKS_ALL_IP_RANGES",
								"old":      "",
							},
							"subnetwork.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"tcp_established_idle_timeout_sec": {
								"computed": false,
								"new":      "1200",
								"old":      "",
							},
							"tcp_transitory_idle_timeout_sec": {
								"computed": false,
								"new":      "30",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"udp_idle_timeout_sec": {
								"computed": false,
								"new":      "30",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},

	"module.primary_tfe.module.tfe_nlb": {
		"data": {
			"google_compute_instance_group": {
				"gce_ig": {
					0: {
						"applied": {
							"zone": "europe-west4-a",
						},
						"destroy": false,
						"diff": {
							"description": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instances.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"named_port.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"size": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"zone": {
								"computed": false,
								"new":      "europe-west4-a",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
		"path": [
			"primary_tfe",
			"tfe_nlb",
		],
		"resources": {
			"google_compute_firewall": {
				"gcp_lb_fw": {
					0: {
						"applied": {
							"allow": [
								{
									"ports": [
										"8800",
										"23005",
									],
									"protocol": "tcp",
								},
							],
							"deny":           [],
							"description":    null,
							"disabled":       null,
							"enable_logging": null,
							"priority":       1000,
							"project":        "aeroframe",
							"source_ranges": [
								"0.0.0.0/0",
							],
							"source_service_accounts": null,
							"source_tags":             null,
							"target_service_accounts": null,
							"target_tags": [
								"tfe",
							],
							"timeouts": null,
						},
						"destroy": false,
						"diff": {
							"allow.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"allow.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"allow.0.ports.#": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"allow.0.ports.0": {
								"computed": false,
								"new":      "8800",
								"old":      "",
							},
							"allow.0.ports.1": {
								"computed": false,
								"new":      "23005",
								"old":      "",
							},
							"allow.0.protocol": {
								"computed": false,
								"new":      "tcp",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"deny.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"destination_ranges.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"direction": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"disabled": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"enable_logging": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"priority": {
								"computed": false,
								"new":      "1000",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"source_ranges.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"source_ranges.0": {
								"computed": false,
								"new":      "0.0.0.0/0",
								"old":      "",
							},
							"source_service_accounts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"source_tags": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"target_service_accounts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"target_tags.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"target_tags.0": {
								"computed": false,
								"new":      "tfe",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_forwarding_rule": {
				"gcp_fr": {
					0: {
						"applied": {
							"all_ports":             null,
							"backend_service":       null,
							"description":           null,
							"load_balancing_scheme": "EXTERNAL",
							"port_range":            "8800",
							"ports":                 null,
							"project":               "aeroframe",
							"region":                "europe-west4",
							"service_label":         null,
							"timeouts":              null,
						},
						"destroy": false,
						"diff": {
							"all_ports": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"backend_service": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_protocol": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_version": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"load_balancing_scheme": {
								"computed": false,
								"new":      "EXTERNAL",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network_tier": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"port_range": {
								"computed": false,
								"new":      "8800",
								"old":      "",
							},
							"ports": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service_label": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"service_name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"subnetwork": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"target": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
					1: {
						"applied": {
							"all_ports":             null,
							"backend_service":       null,
							"description":           null,
							"load_balancing_scheme": "EXTERNAL",
							"port_range":            "23005",
							"ports":                 null,
							"project":               "aeroframe",
							"region":                "europe-west4",
							"service_label":         null,
							"timeouts":              null,
						},
						"destroy": false,
						"diff": {
							"all_ports": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"backend_service": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_address": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_protocol": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_version": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"load_balancing_scheme": {
								"computed": false,
								"new":      "EXTERNAL",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"network_tier": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"port_range": {
								"computed": false,
								"new":      "23005",
								"old":      "",
							},
							"ports": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service_label": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"service_name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"subnetwork": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"target": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_http_health_check": {
				"gcp_hhc": {
					0: {
						"applied": {
							"check_interval_sec":  5,
							"description":         null,
							"healthy_threshold":   2,
							"host":                null,
							"port":                8800,
							"project":             "aeroframe",
							"request_path":        "/",
							"timeout_sec":         5,
							"timeouts":            null,
							"unhealthy_threshold": 2,
						},
						"destroy": false,
						"diff": {
							"check_interval_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"healthy_threshold": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"host": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"port": {
								"computed": false,
								"new":      "8800",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"request_path": {
								"computed": false,
								"new":      "/",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeout_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"unhealthy_threshold": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
						},
						"requires_new": false,
					},
					1: {
						"applied": {
							"check_interval_sec":  5,
							"description":         null,
							"healthy_threshold":   2,
							"host":                null,
							"port":                23005,
							"project":             "aeroframe",
							"request_path":        "/healthz",
							"timeout_sec":         5,
							"timeouts":            null,
							"unhealthy_threshold": 2,
						},
						"destroy": false,
						"diff": {
							"check_interval_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"creation_timestamp": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"healthy_threshold": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"host": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"port": {
								"computed": false,
								"new":      "23005",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"request_path": {
								"computed": false,
								"new":      "/healthz",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeout_sec": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"unhealthy_threshold": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_target_pool": {
				"gcp_tp": {
					0: {
						"applied": {
							"backup_pool":      null,
							"description":      null,
							"failover_ratio":   null,
							"project":          "aeroframe",
							"region":           "europe-west4",
							"session_affinity": "NONE",
						},
						"destroy": false,
						"diff": {
							"backup_pool": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"failover_ratio": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"health_checks.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instances.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"session_affinity": {
								"computed": false,
								"new":      "NONE",
								"old":      "",
							},
						},
						"requires_new": false,
					},
					1: {
						"applied": {
							"backup_pool":      null,
							"description":      null,
							"failover_ratio":   null,
							"project":          "aeroframe",
							"region":           "europe-west4",
							"session_affinity": "NONE",
						},
						"destroy": false,
						"diff": {
							"backup_pool": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"failover_ratio": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"health_checks.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instances.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": false,
								"new":      "aeroframe",
								"old":      "",
							},
							"region": {
								"computed": false,
								"new":      "europe-west4",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"session_affinity": {
								"computed": false,
								"new":      "NONE",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
	[
		"primary_tfe",
	],
	[
		"primary_tfe",
		"tfe_asg",
	],
	[
		"primary_tfe",
		"tfe_fw",
	],
	[
		"primary_tfe",
		"tfe_network",
	],
	[
		"primary_tfe",
		"tfe_network",
		"nat",
	],
	[
		"primary_tfe",
		"tfe_nlb",
	],
]

terraform_version = "0.12.21"

variables = {
	"account_id":                                  "aeroframe",
	"az_location":                                 "westeurope",
	"certificate":                                 "tfe-cluster.crt",
	"client_id":                                   "48cb9cf5-f551-4bcd-b9d8-89ebae297a40",
	"client_secret":                               "dBLMeiw-0iFIdm535D/iFoD=oF=5GJ5n",
	"cloud_provider":                              "gcp",
	"costcenter":                                  "937294293",
	"creator":                                     "smatale",
	"domain":                                      "test.slb.com",
	"dr_region":                                   "europe-north1",
	"enable-oslogin":                              "true",
	"enable_regional_group":                       "true",
	"encryption_password":                         "",
	"environment":                                 "tst",
	"frontend_dns":                                "terraform",
	"gcs_bucket_location":                         "EUR4",
	"gcs_credentials":                             "tfe-gcp-creds.json",
	"image_family":                                "rhel-7-v20190729",
	"instance_zone":                               "[\"b\", \"c\"]",
	"license_file":                                "schlumberger.rli",
	"machine_type":                                "n1-standard-2",
	"postgresql_database":                         "postgres",
	"postgresql_disk_size":                        "100",
	"postgresql_extra_params":                     "937294293",
	"postgresql_instance_availability_type":       "REGIONAL",
	"postgresql_instance_maintenance_window_day":  "5",
	"postgresql_instance_maintenance_window_hour": "12",
	"postgresql_instance_tier":                    "db-custom-8-30720",
	"postgresql_password":                         "admin",
	"postgresql_user":                             "postgres",
	"prefix":                                      "tfvmex",
	"privatekey":                                  "tfe-cluster-private.key",
	"project":                                     "aeroframe",
	"region":                                      "europe-west4",
	"server_status":                               "hypercare",
	"server_type":                                 "app",
	"ssh_keys":                                    "[]",
	"ssr_id":                                      "7361",
	"subscription_id":                             "8ad38ca9-23ff-4c12-8e04-d9adb350983c",
	"tenant_id":                                   "c8cd0425-e7b7-4f3d-9215-7e5fa3f439e8",
	"tfe_console_admin_username":                  "admin",
	"tfe_cosnole_admin_useremail":                 "smatale@slb.com",
	"vm_boot_disk_size":                           "50",
	"vm_boot_disk_type":                           "pd-ssd",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
